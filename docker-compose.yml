version: "3.8"


services:
  traefik:
    image: "traefik:v3.0"
    command:
#      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
#      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
        traefik.enable: true
        traefik.http.routers.traefik.rule: "Host(`traefik.localhost`)"
        traefik.http.routers.traefik.entrypoints: web
        traefik.http.services.traefik.loadbalancer.server.port: 8080
    networks:
      proxy:
        aliases:
          - "api.localhost"

  frontend:
    container_name: frontend
    restart: unless-stopped
    image: node:19-alpine
    user: node
    command: node app.js --port=3000
    volumes:
      - ${PWD}/frontend:/home/node/project
    working_dir: /home/node/project
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.rule: "Host(`frontend.localhost`)"
      traefik.http.routers.frontend.entrypoints: web
      traefik.http.services.frontend.loadbalancer.server.port: 3000
    networks:
      - proxy
      - web

  api:
    container_name: api
    restart: unless-stopped
    tty: true
    build:
      context: ./docker/nginx
    volumes:
      - ${PWD}/api:/var/www/project/
    depends_on:
      - php
    labels:
      traefik.enable: true
      traefik.http.routers.api.rule: "Host(`api.localhost`)"
      traefik.http.routers.api.entrypoints: web
      traefik.http.services.api.loadbalancer.server.port: 80
    networks:
      - proxy
      - web

  php:
    container_name: php
    restart: unless-stopped
    build:
      context: ./docker/php
    volumes:
      - ./api:/var/www/project/
    depends_on:
      - database
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-14}
    networks:
      - proxy

  database:
    image: postgres:${POSTGRES_VERSION:-14}-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-!ChangeMe!}
      - POSTGRES_USER=${POSTGRES_USER:-app}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - proxy

volumes:
    db_data:

networks:
  web:
    external: true
  proxy:
    external: false